{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landingpage","Component","Aboutme","Contact","Projects","Resume","Main","exact","path","component","App","className","title","scroll","to","href","style","width","margin","col","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAUeA,E,iLANf,OACE,6BAAK,iD,GAHmBC,aCQXC,E,iLANf,OACE,6BAAK,+C,GAHeD,aCOPE,E,iLALf,OACE,6BAAK,iD,GAHeF,aCQPG,E,iLANf,OACE,6BAAK,kD,GAHgBH,aCQRI,E,iLANf,OACE,6BAAK,gD,GAHcJ,aCgBNK,EAVF,kBACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYT,IAClC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAYP,IACnC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAYN,IACnC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAYL,IACpC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAYJ,M,QCqCnBK,MA3Cf,WACE,OACE,yBAAKC,UAAU,oBACb,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAeC,MAAM,QAAUC,QAAM,GACnD,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAKN,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACI,uBAAGG,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,UAGR,kBAAC,UAAD,KACA,yBAAKC,MAAS,CAACC,MAAO,OAAQC,OAAQ,SACtC,kBAAC,OAAD,CAAMP,UAAU,gBAChB,kBAAC,OAAD,CAAMQ,IAAK,IACV,yBACEC,IAAI,QAMJ,yBAAKT,UAAU,iBAEd,kBAAC,EAAD,UC/BMU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACT,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEEC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.14578aa9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Landingpage extends Component {\n  render() {\nreturn(\n  <div><h1>Landing page</h1></div>\n)\n\n  }\n}\nexport default Landingpage;\n","import React, { Component } from 'react';\n\nclass Aboutme extends Component {\n  render() {\nreturn(\n  <div><h1>About Page</h1></div>\n)\n\n  }\n}\nexport default Aboutme;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\nreturn(\n  <div><h1>Contact Page</h1></div>\n)\n  }\n}\nexport default Contact;\n","import React, { Component } from 'react';\n\nclass Projects extends Component {\n  render() {\nreturn(\n  <div><h1>Projects Page</h1></div>\n)\n\n  }\n}\nexport default Projects;\n","import React, { Component } from 'react';\n\nclass Resume extends Component {\n  render() {\nreturn(\n  <div><h1>Resume Page</h1></div>\n)\n\n  }\n}\nexport default Resume;\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Landingpage from './landingpage';\nimport Aboutme from './aboutme';\nimport Contact from './contact';\nimport Projects from './projects';\nimport Resume from './resume';\n\nconst Main = () => (\n<Switch>\n<Route exact path=\"/\" component ={Landingpage} />\n<Route path=\"/aboutme\" component ={Aboutme} />\n<Route path=\"/contact\" component ={Contact} />\n<Route path=\"/projects\" component ={Projects} />\n<Route path=\"/resume\" component ={Resume} />\n  </Switch>\n)\n\nexport default Main;\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport {Layout, Header, Navigation, Drawer,Content} from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\nimport { Grid, Cell} from 'react-mdl';\n\nfunction App() {\n  return (\n    <div className=\"demo-big-content\">\n      <Layout>\n          <Header className=\"header-color\" title=\"Title\"   scroll >\n              <Navigation>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact</Link>\n\n\n              </Navigation>\n          </Header>\n          <Drawer title=\"Title\">\n              <Navigation>\n                  <a href=\"/\">Link</a>\n                  <a href=\"/\">Link</a>\n                  <a href=\"/\">Link</a>\n                  <a href=\"/\">Link</a>\n              </Navigation>\n          </Drawer>\n          <Content>\n          <div style = {{width: '100%', margin: 'auto'}}>\n          <Grid className=\"landing-grid\">\n          <Cell col={12}>\n           <img\n             src=\"\"\n           />\n          </Cell>\n          </Grid>\n          </div>\n\n             <div className=\"page-content\" />\n\n              <Main/>\n\n          </Content>\n      </Layout>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}